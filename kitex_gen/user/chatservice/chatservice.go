// Code generated by Kitex v0.4.4. DO NOT EDIT.

package chatservice

import (
	"context"
	user "first/kitex_gen/user"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return chatServiceServiceInfo
}

var chatServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ChatService"
	handlerType := (*user.ChatService)(nil)
	methods := map[string]kitex.MethodInfo{
		"SendMsg":           kitex.NewMethodInfo(sendMsgHandler, newSendMsgArgs, newSendMsgResult, false),
		"GetChatList":       kitex.NewMethodInfo(getChatListHandler, newGetChatListArgs, newGetChatListResult, false),
		"GetFriendChatList": kitex.NewMethodInfo(getFriendChatListHandler, newGetFriendChatListArgs, newGetFriendChatListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func sendMsgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.SaveMsgRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.ChatService).SendMsg(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SendMsgArgs:
		success, err := handler.(user.ChatService).SendMsg(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendMsgResult)
		realResult.Success = success
	}
	return nil
}
func newSendMsgArgs() interface{} {
	return &SendMsgArgs{}
}

func newSendMsgResult() interface{} {
	return &SendMsgResult{}
}

type SendMsgArgs struct {
	Req *user.SaveMsgRequest
}

func (p *SendMsgArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.SaveMsgRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendMsgArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendMsgArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendMsgArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SendMsgArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SendMsgArgs) Unmarshal(in []byte) error {
	msg := new(user.SaveMsgRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendMsgArgs_Req_DEFAULT *user.SaveMsgRequest

func (p *SendMsgArgs) GetReq() *user.SaveMsgRequest {
	if !p.IsSetReq() {
		return SendMsgArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

type SendMsgResult struct {
	Success *user.SaveMsgResponse
}

var SendMsgResult_Success_DEFAULT *user.SaveMsgResponse

func (p *SendMsgResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.SaveMsgResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendMsgResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendMsgResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendMsgResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SendMsgResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SendMsgResult) Unmarshal(in []byte) error {
	msg := new(user.SaveMsgResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendMsgResult) GetSuccess() *user.SaveMsgResponse {
	if !p.IsSetSuccess() {
		return SendMsgResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendMsgResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.SaveMsgResponse)
}

func (p *SendMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getChatListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetChatListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.ChatService).GetChatList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetChatListArgs:
		success, err := handler.(user.ChatService).GetChatList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetChatListResult)
		realResult.Success = success
	}
	return nil
}
func newGetChatListArgs() interface{} {
	return &GetChatListArgs{}
}

func newGetChatListResult() interface{} {
	return &GetChatListResult{}
}

type GetChatListArgs struct {
	Req *user.GetChatListRequest
}

func (p *GetChatListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetChatListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetChatListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetChatListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetChatListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetChatListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetChatListArgs) Unmarshal(in []byte) error {
	msg := new(user.GetChatListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetChatListArgs_Req_DEFAULT *user.GetChatListRequest

func (p *GetChatListArgs) GetReq() *user.GetChatListRequest {
	if !p.IsSetReq() {
		return GetChatListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetChatListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetChatListResult struct {
	Success *user.GetChatListResponse
}

var GetChatListResult_Success_DEFAULT *user.GetChatListResponse

func (p *GetChatListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetChatListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetChatListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetChatListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetChatListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetChatListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetChatListResult) Unmarshal(in []byte) error {
	msg := new(user.GetChatListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetChatListResult) GetSuccess() *user.GetChatListResponse {
	if !p.IsSetSuccess() {
		return GetChatListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetChatListResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetChatListResponse)
}

func (p *GetChatListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFriendChatListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetFriendChatRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.ChatService).GetFriendChatList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFriendChatListArgs:
		success, err := handler.(user.ChatService).GetFriendChatList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFriendChatListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFriendChatListArgs() interface{} {
	return &GetFriendChatListArgs{}
}

func newGetFriendChatListResult() interface{} {
	return &GetFriendChatListResult{}
}

type GetFriendChatListArgs struct {
	Req *user.GetFriendChatRequest
}

func (p *GetFriendChatListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetFriendChatRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFriendChatListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFriendChatListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFriendChatListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFriendChatListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFriendChatListArgs) Unmarshal(in []byte) error {
	msg := new(user.GetFriendChatRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFriendChatListArgs_Req_DEFAULT *user.GetFriendChatRequest

func (p *GetFriendChatListArgs) GetReq() *user.GetFriendChatRequest {
	if !p.IsSetReq() {
		return GetFriendChatListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFriendChatListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFriendChatListResult struct {
	Success *user.GetFriendChatResponse
}

var GetFriendChatListResult_Success_DEFAULT *user.GetFriendChatResponse

func (p *GetFriendChatListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetFriendChatResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFriendChatListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFriendChatListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFriendChatListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFriendChatListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFriendChatListResult) Unmarshal(in []byte) error {
	msg := new(user.GetFriendChatResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFriendChatListResult) GetSuccess() *user.GetFriendChatResponse {
	if !p.IsSetSuccess() {
		return GetFriendChatListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFriendChatListResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetFriendChatResponse)
}

func (p *GetFriendChatListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendMsg(ctx context.Context, Req *user.SaveMsgRequest) (r *user.SaveMsgResponse, err error) {
	var _args SendMsgArgs
	_args.Req = Req
	var _result SendMsgResult
	if err = p.c.Call(ctx, "SendMsg", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetChatList(ctx context.Context, Req *user.GetChatListRequest) (r *user.GetChatListResponse, err error) {
	var _args GetChatListArgs
	_args.Req = Req
	var _result GetChatListResult
	if err = p.c.Call(ctx, "GetChatList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFriendChatList(ctx context.Context, Req *user.GetFriendChatRequest) (r *user.GetFriendChatResponse, err error) {
	var _args GetFriendChatListArgs
	_args.Req = Req
	var _result GetFriendChatListResult
	if err = p.c.Call(ctx, "GetFriendChatList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
