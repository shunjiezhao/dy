// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package video

import (
	user "first/kitex_gen/user"
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *VideoBaseResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_VideoBaseResp[number], err)
}

func (x *VideoBaseResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *VideoBaseResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusMsg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *IncrCommentRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IncrCommentRequest[number], err)
}

func (x *IncrCommentRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.VideoId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IncrCommentRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Add, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *IncrCommentResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IncrCommentResponse[number], err)
}

func (x *IncrCommentResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v VideoBaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *LikeVideoAction) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LikeVideoAction[number], err)
}

func (x *LikeVideoAction) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ActionType, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *LikeVideoRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LikeVideoRequest[number], err)
}

func (x *LikeVideoRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.VideoId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *LikeVideoRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v LikeVideoAction
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ActionType = &v
	return offset, nil
}

func (x *LikeVideoRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Uuid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *LikeVideoResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LikeVideoResponse[number], err)
}

func (x *LikeVideoResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v VideoBaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *PublishListRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PublishListRequest[number], err)
}

func (x *PublishListRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Author, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PublishListRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PlayUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishListRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CoverUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishListRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishListResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PublishListResponse[number], err)
}

func (x *PublishListResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v VideoBaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *GetVideoListRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetVideoListRequest[number], err)
}

func (x *GetVideoListRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Author, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetVideoListRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.GetAuthor_, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetVideoListRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.TimeStamp, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetVideoListRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Uuid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetVideoListRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.IsLike, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetVideoListResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetVideoListResponse[number], err)
}

func (x *GetVideoListResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v VideoBaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resp = &v
	return offset, nil
}

func (x *GetVideoListResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Video
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.VideoList = append(x.VideoList, &v)
	return offset, nil
}

func (x *Video) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Video[number], err)
}

func (x *Video) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Video) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v user.User
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Author = &v
	return offset, nil
}

func (x *Video) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PlayUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Video) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CoverUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Video) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.FavoriteCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Video) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CommentCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Video) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.IsFavorite, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Video) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *VideoBaseResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *VideoBaseResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.StatusCode)
	return offset
}

func (x *VideoBaseResp) fastWriteField2(buf []byte) (offset int) {
	if x.StatusMsg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.StatusMsg)
	return offset
}

func (x *IncrCommentRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *IncrCommentRequest) fastWriteField1(buf []byte) (offset int) {
	if x.VideoId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.VideoId)
	return offset
}

func (x *IncrCommentRequest) fastWriteField2(buf []byte) (offset int) {
	if !x.Add {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.Add)
	return offset
}

func (x *IncrCommentResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *IncrCommentResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Resp)
	return offset
}

func (x *LikeVideoAction) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *LikeVideoAction) fastWriteField1(buf []byte) (offset int) {
	if x.ActionType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.ActionType)
	return offset
}

func (x *LikeVideoRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *LikeVideoRequest) fastWriteField1(buf []byte) (offset int) {
	if x.VideoId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.VideoId)
	return offset
}

func (x *LikeVideoRequest) fastWriteField2(buf []byte) (offset int) {
	if x.ActionType == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.ActionType)
	return offset
}

func (x *LikeVideoRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Uuid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.Uuid)
	return offset
}

func (x *LikeVideoResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *LikeVideoResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Resp)
	return offset
}

func (x *PublishListRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *PublishListRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Author == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.Author)
	return offset
}

func (x *PublishListRequest) fastWriteField2(buf []byte) (offset int) {
	if x.PlayUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.PlayUrl)
	return offset
}

func (x *PublishListRequest) fastWriteField3(buf []byte) (offset int) {
	if x.CoverUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.CoverUrl)
	return offset
}

func (x *PublishListRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.Title)
	return offset
}

func (x *PublishListResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PublishListResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Resp)
	return offset
}

func (x *GetVideoListRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *GetVideoListRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Author == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.Author)
	return offset
}

func (x *GetVideoListRequest) fastWriteField2(buf []byte) (offset int) {
	if !x.GetAuthor_ {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetAuthor_)
	return offset
}

func (x *GetVideoListRequest) fastWriteField3(buf []byte) (offset int) {
	if x.TimeStamp == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.TimeStamp)
	return offset
}

func (x *GetVideoListRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Uuid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.Uuid)
	return offset
}

func (x *GetVideoListRequest) fastWriteField5(buf []byte) (offset int) {
	if !x.IsLike {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 5, x.IsLike)
	return offset
}

func (x *GetVideoListResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetVideoListResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Resp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.Resp)
	return offset
}

func (x *GetVideoListResponse) fastWriteField3(buf []byte) (offset int) {
	if x.VideoList == nil {
		return offset
	}
	for i := range x.VideoList {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.VideoList[i])
	}
	return offset
}

func (x *Video) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *Video) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.Id)
	return offset
}

func (x *Video) fastWriteField2(buf []byte) (offset int) {
	if x.Author == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.Author)
	return offset
}

func (x *Video) fastWriteField3(buf []byte) (offset int) {
	if x.PlayUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.PlayUrl)
	return offset
}

func (x *Video) fastWriteField4(buf []byte) (offset int) {
	if x.CoverUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.CoverUrl)
	return offset
}

func (x *Video) fastWriteField5(buf []byte) (offset int) {
	if x.FavoriteCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.FavoriteCount)
	return offset
}

func (x *Video) fastWriteField6(buf []byte) (offset int) {
	if x.CommentCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.CommentCount)
	return offset
}

func (x *Video) fastWriteField7(buf []byte) (offset int) {
	if !x.IsFavorite {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 7, x.IsFavorite)
	return offset
}

func (x *Video) fastWriteField8(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.Title)
	return offset
}

func (x *VideoBaseResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *VideoBaseResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.StatusCode)
	return n
}

func (x *VideoBaseResp) sizeField2() (n int) {
	if x.StatusMsg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.StatusMsg)
	return n
}

func (x *IncrCommentRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *IncrCommentRequest) sizeField1() (n int) {
	if x.VideoId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.VideoId)
	return n
}

func (x *IncrCommentRequest) sizeField2() (n int) {
	if !x.Add {
		return n
	}
	n += fastpb.SizeBool(2, x.Add)
	return n
}

func (x *IncrCommentResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *IncrCommentResponse) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Resp)
	return n
}

func (x *LikeVideoAction) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *LikeVideoAction) sizeField1() (n int) {
	if x.ActionType == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.ActionType)
	return n
}

func (x *LikeVideoRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *LikeVideoRequest) sizeField1() (n int) {
	if x.VideoId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.VideoId)
	return n
}

func (x *LikeVideoRequest) sizeField2() (n int) {
	if x.ActionType == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.ActionType)
	return n
}

func (x *LikeVideoRequest) sizeField3() (n int) {
	if x.Uuid == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.Uuid)
	return n
}

func (x *LikeVideoResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *LikeVideoResponse) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Resp)
	return n
}

func (x *PublishListRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *PublishListRequest) sizeField1() (n int) {
	if x.Author == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.Author)
	return n
}

func (x *PublishListRequest) sizeField2() (n int) {
	if x.PlayUrl == "" {
		return n
	}
	n += fastpb.SizeString(2, x.PlayUrl)
	return n
}

func (x *PublishListRequest) sizeField3() (n int) {
	if x.CoverUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.CoverUrl)
	return n
}

func (x *PublishListRequest) sizeField4() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(4, x.Title)
	return n
}

func (x *PublishListResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PublishListResponse) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Resp)
	return n
}

func (x *GetVideoListRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *GetVideoListRequest) sizeField1() (n int) {
	if x.Author == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.Author)
	return n
}

func (x *GetVideoListRequest) sizeField2() (n int) {
	if !x.GetAuthor_ {
		return n
	}
	n += fastpb.SizeBool(2, x.GetAuthor_)
	return n
}

func (x *GetVideoListRequest) sizeField3() (n int) {
	if x.TimeStamp == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.TimeStamp)
	return n
}

func (x *GetVideoListRequest) sizeField4() (n int) {
	if x.Uuid == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.Uuid)
	return n
}

func (x *GetVideoListRequest) sizeField5() (n int) {
	if !x.IsLike {
		return n
	}
	n += fastpb.SizeBool(5, x.IsLike)
	return n
}

func (x *GetVideoListResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField3()
	return n
}

func (x *GetVideoListResponse) sizeField1() (n int) {
	if x.Resp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.Resp)
	return n
}

func (x *GetVideoListResponse) sizeField3() (n int) {
	if x.VideoList == nil {
		return n
	}
	for i := range x.VideoList {
		n += fastpb.SizeMessage(3, x.VideoList[i])
	}
	return n
}

func (x *Video) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *Video) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.Id)
	return n
}

func (x *Video) sizeField2() (n int) {
	if x.Author == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.Author)
	return n
}

func (x *Video) sizeField3() (n int) {
	if x.PlayUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.PlayUrl)
	return n
}

func (x *Video) sizeField4() (n int) {
	if x.CoverUrl == "" {
		return n
	}
	n += fastpb.SizeString(4, x.CoverUrl)
	return n
}

func (x *Video) sizeField5() (n int) {
	if x.FavoriteCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.FavoriteCount)
	return n
}

func (x *Video) sizeField6() (n int) {
	if x.CommentCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.CommentCount)
	return n
}

func (x *Video) sizeField7() (n int) {
	if !x.IsFavorite {
		return n
	}
	n += fastpb.SizeBool(7, x.IsFavorite)
	return n
}

func (x *Video) sizeField8() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(8, x.Title)
	return n
}

var fieldIDToName_VideoBaseResp = map[int32]string{
	1: "StatusCode",
	2: "StatusMsg",
}

var fieldIDToName_IncrCommentRequest = map[int32]string{
	1: "VideoId",
	2: "Add",
}

var fieldIDToName_IncrCommentResponse = map[int32]string{
	1: "Resp",
}

var fieldIDToName_LikeVideoAction = map[int32]string{
	1: "ActionType",
}

var fieldIDToName_LikeVideoRequest = map[int32]string{
	1: "VideoId",
	2: "ActionType",
	3: "Uuid",
}

var fieldIDToName_LikeVideoResponse = map[int32]string{
	1: "Resp",
}

var fieldIDToName_PublishListRequest = map[int32]string{
	1: "Author",
	2: "PlayUrl",
	3: "CoverUrl",
	4: "Title",
}

var fieldIDToName_PublishListResponse = map[int32]string{
	1: "Resp",
}

var fieldIDToName_GetVideoListRequest = map[int32]string{
	1: "Author",
	2: "GetAuthor_",
	3: "TimeStamp",
	4: "Uuid",
	5: "IsLike",
}

var fieldIDToName_GetVideoListResponse = map[int32]string{
	1: "Resp",
	3: "VideoList",
}

var fieldIDToName_Video = map[int32]string{
	1: "Id",
	2: "Author",
	3: "PlayUrl",
	4: "CoverUrl",
	5: "FavoriteCount",
	6: "CommentCount",
	7: "IsFavorite",
	8: "Title",
}

var _ = user.File_user_proto
