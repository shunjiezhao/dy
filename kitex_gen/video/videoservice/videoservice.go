// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	video "first/kitex_gen/video"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Upload":       kitex.NewMethodInfo(uploadHandler, newUploadArgs, newUploadResult, false),
		"GetVideoList": kitex.NewMethodInfo(getVideoListHandler, newGetVideoListArgs, newGetVideoListResult, false),
		"LikeVideo":    kitex.NewMethodInfo(likeVideoHandler, newLikeVideoArgs, newLikeVideoResult, false),
		"IncrComment":  kitex.NewMethodInfo(incrCommentHandler, newIncrCommentArgs, newIncrCommentResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func uploadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.PublishListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).Upload(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UploadArgs:
		success, err := handler.(video.VideoService).Upload(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UploadResult)
		realResult.Success = success
	}
	return nil
}
func newUploadArgs() interface{} {
	return &UploadArgs{}
}

func newUploadResult() interface{} {
	return &UploadResult{}
}

type UploadArgs struct {
	Req *video.PublishListRequest
}

func (p *UploadArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.PublishListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UploadArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UploadArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UploadArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UploadArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UploadArgs) Unmarshal(in []byte) error {
	msg := new(video.PublishListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UploadArgs_Req_DEFAULT *video.PublishListRequest

func (p *UploadArgs) GetReq() *video.PublishListRequest {
	if !p.IsSetReq() {
		return UploadArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UploadArgs) IsSetReq() bool {
	return p.Req != nil
}

type UploadResult struct {
	Success *video.PublishListResponse
}

var UploadResult_Success_DEFAULT *video.PublishListResponse

func (p *UploadResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.PublishListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UploadResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UploadResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UploadResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UploadResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UploadResult) Unmarshal(in []byte) error {
	msg := new(video.PublishListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UploadResult) GetSuccess() *video.PublishListResponse {
	if !p.IsSetSuccess() {
		return UploadResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UploadResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.PublishListResponse)
}

func (p *UploadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.GetVideoListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).GetVideoList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoListArgs:
		success, err := handler.(video.VideoService).GetVideoList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoListResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoListArgs() interface{} {
	return &GetVideoListArgs{}
}

func newGetVideoListResult() interface{} {
	return &GetVideoListResult{}
}

type GetVideoListArgs struct {
	Req *video.GetVideoListRequest
}

func (p *GetVideoListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.GetVideoListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideoListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideoListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideoListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoListArgs) Unmarshal(in []byte) error {
	msg := new(video.GetVideoListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoListArgs_Req_DEFAULT *video.GetVideoListRequest

func (p *GetVideoListArgs) GetReq() *video.GetVideoListRequest {
	if !p.IsSetReq() {
		return GetVideoListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetVideoListResult struct {
	Success *video.GetVideoListResponse
}

var GetVideoListResult_Success_DEFAULT *video.GetVideoListResponse

func (p *GetVideoListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.GetVideoListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideoListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideoListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideoListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoListResult) Unmarshal(in []byte) error {
	msg := new(video.GetVideoListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoListResult) GetSuccess() *video.GetVideoListResponse {
	if !p.IsSetSuccess() {
		return GetVideoListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoListResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.GetVideoListResponse)
}

func (p *GetVideoListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func likeVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.LikeVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).LikeVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LikeVideoArgs:
		success, err := handler.(video.VideoService).LikeVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LikeVideoResult)
		realResult.Success = success
	}
	return nil
}
func newLikeVideoArgs() interface{} {
	return &LikeVideoArgs{}
}

func newLikeVideoResult() interface{} {
	return &LikeVideoResult{}
}

type LikeVideoArgs struct {
	Req *video.LikeVideoRequest
}

func (p *LikeVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.LikeVideoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LikeVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LikeVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LikeVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in LikeVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *LikeVideoArgs) Unmarshal(in []byte) error {
	msg := new(video.LikeVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LikeVideoArgs_Req_DEFAULT *video.LikeVideoRequest

func (p *LikeVideoArgs) GetReq() *video.LikeVideoRequest {
	if !p.IsSetReq() {
		return LikeVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LikeVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type LikeVideoResult struct {
	Success *video.LikeVideoResponse
}

var LikeVideoResult_Success_DEFAULT *video.LikeVideoResponse

func (p *LikeVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.LikeVideoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LikeVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LikeVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LikeVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in LikeVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *LikeVideoResult) Unmarshal(in []byte) error {
	msg := new(video.LikeVideoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LikeVideoResult) GetSuccess() *video.LikeVideoResponse {
	if !p.IsSetSuccess() {
		return LikeVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LikeVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.LikeVideoResponse)
}

func (p *LikeVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func incrCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.IncrCommentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).IncrComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IncrCommentArgs:
		success, err := handler.(video.VideoService).IncrComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IncrCommentResult)
		realResult.Success = success
	}
	return nil
}
func newIncrCommentArgs() interface{} {
	return &IncrCommentArgs{}
}

func newIncrCommentResult() interface{} {
	return &IncrCommentResult{}
}

type IncrCommentArgs struct {
	Req *video.IncrCommentRequest
}

func (p *IncrCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.IncrCommentRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IncrCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IncrCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IncrCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in IncrCommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *IncrCommentArgs) Unmarshal(in []byte) error {
	msg := new(video.IncrCommentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IncrCommentArgs_Req_DEFAULT *video.IncrCommentRequest

func (p *IncrCommentArgs) GetReq() *video.IncrCommentRequest {
	if !p.IsSetReq() {
		return IncrCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IncrCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

type IncrCommentResult struct {
	Success *video.IncrCommentResponse
}

var IncrCommentResult_Success_DEFAULT *video.IncrCommentResponse

func (p *IncrCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.IncrCommentResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IncrCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IncrCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IncrCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in IncrCommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *IncrCommentResult) Unmarshal(in []byte) error {
	msg := new(video.IncrCommentResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IncrCommentResult) GetSuccess() *video.IncrCommentResponse {
	if !p.IsSetSuccess() {
		return IncrCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IncrCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.IncrCommentResponse)
}

func (p *IncrCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Upload(ctx context.Context, Req *video.PublishListRequest) (r *video.PublishListResponse, err error) {
	var _args UploadArgs
	_args.Req = Req
	var _result UploadResult
	if err = p.c.Call(ctx, "Upload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoList(ctx context.Context, Req *video.GetVideoListRequest) (r *video.GetVideoListResponse, err error) {
	var _args GetVideoListArgs
	_args.Req = Req
	var _result GetVideoListResult
	if err = p.c.Call(ctx, "GetVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LikeVideo(ctx context.Context, Req *video.LikeVideoRequest) (r *video.LikeVideoResponse, err error) {
	var _args LikeVideoArgs
	_args.Req = Req
	var _result LikeVideoResult
	if err = p.c.Call(ctx, "LikeVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IncrComment(ctx context.Context, Req *video.IncrCommentRequest) (r *video.IncrCommentResponse, err error) {
	var _args IncrCommentArgs
	_args.Req = Req
	var _result IncrCommentResult
	if err = p.c.Call(ctx, "IncrComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
