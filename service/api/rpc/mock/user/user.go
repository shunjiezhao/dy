// Code generated by MockGen. DO NOT EDIT.
// Source: first/service/api/rpc/user (interfaces: RpcProxyIFace)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	handlers "first/service/api/handlers"
	common "first/service/api/handlers/common"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRpcProxyIFace is a mock of RpcProxyIFace interface.
type MockRpcProxyIFace struct {
	ctrl     *gomock.Controller
	recorder *MockRpcProxyIFaceMockRecorder
}

// MockRpcProxyIFaceMockRecorder is the mock recorder for MockRpcProxyIFace.
type MockRpcProxyIFaceMockRecorder struct {
	mock *MockRpcProxyIFace
}

// NewMockRpcProxyIFace creates a new mock instance.
func NewMockRpcProxyIFace(ctrl *gomock.Controller) *MockRpcProxyIFace {
	mock := &MockRpcProxyIFace{ctrl: ctrl}
	mock.recorder = &MockRpcProxyIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRpcProxyIFace) EXPECT() *MockRpcProxyIFaceMockRecorder {
	return m.recorder
}

// ActionComment mocks base method.
func (m *MockRpcProxyIFace) ActionComment(arg0 context.Context, arg1 *common.CommentActionRequest) (*handlers.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionComment", arg0, arg1)
	ret0, _ := ret[0].(*handlers.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActionComment indicates an expected call of ActionComment.
func (mr *MockRpcProxyIFaceMockRecorder) ActionComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionComment", reflect.TypeOf((*MockRpcProxyIFace)(nil).ActionComment), arg0, arg1)
}

// ActionFollow mocks base method.
func (m *MockRpcProxyIFace) ActionFollow(arg0 context.Context, arg1 *common.ActionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionFollow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionFollow indicates an expected call of ActionFollow.
func (mr *MockRpcProxyIFaceMockRecorder) ActionFollow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionFollow", reflect.TypeOf((*MockRpcProxyIFace)(nil).ActionFollow), arg0, arg1)
}

// CheckUser mocks base method.
func (m *MockRpcProxyIFace) CheckUser(arg0 context.Context, arg1 *common.LoginRequest) (*handlers.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", arg0, arg1)
	ret0, _ := ret[0].(*handlers.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockRpcProxyIFaceMockRecorder) CheckUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockRpcProxyIFace)(nil).CheckUser), arg0, arg1)
}

// GetComment mocks base method.
func (m *MockRpcProxyIFace) GetComment(arg0 context.Context, arg1 *common.CommentListRequest) ([]*handlers.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0, arg1)
	ret0, _ := ret[0].([]*handlers.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockRpcProxyIFaceMockRecorder) GetComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockRpcProxyIFace)(nil).GetComment), arg0, arg1)
}

// GetFollowList mocks base method.
func (m *MockRpcProxyIFace) GetFollowList(arg0 context.Context, arg1 *common.GetUserFollowListRequest) ([]*handlers.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowList", arg0, arg1)
	ret0, _ := ret[0].([]*handlers.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowList indicates an expected call of GetFollowList.
func (mr *MockRpcProxyIFaceMockRecorder) GetFollowList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowList", reflect.TypeOf((*MockRpcProxyIFace)(nil).GetFollowList), arg0, arg1)
}

// GetFollowerList mocks base method.
func (m *MockRpcProxyIFace) GetFollowerList(arg0 context.Context, arg1 *common.GetUserFollowerListRequest) ([]*handlers.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowerList", arg0, arg1)
	ret0, _ := ret[0].([]*handlers.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowerList indicates an expected call of GetFollowerList.
func (mr *MockRpcProxyIFaceMockRecorder) GetFollowerList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowerList", reflect.TypeOf((*MockRpcProxyIFace)(nil).GetFollowerList), arg0, arg1)
}

// GetFriendList mocks base method.
func (m *MockRpcProxyIFace) GetFriendList(arg0 context.Context, arg1 *common.FriendListRequest) ([]*handlers.FriendUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendList", arg0, arg1)
	ret0, _ := ret[0].([]*handlers.FriendUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendList indicates an expected call of GetFriendList.
func (mr *MockRpcProxyIFaceMockRecorder) GetFriendList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendList", reflect.TypeOf((*MockRpcProxyIFace)(nil).GetFriendList), arg0, arg1)
}

// GetUserInfo mocks base method.
func (m *MockRpcProxyIFace) GetUserInfo(arg0 context.Context, arg1 handlers.UserId) (*handlers.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", arg0, arg1)
	ret0, _ := ret[0].(*handlers.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockRpcProxyIFaceMockRecorder) GetUserInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockRpcProxyIFace)(nil).GetUserInfo), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockRpcProxyIFace) GetUsers(arg0 context.Context, arg1 *common.GetUserSRequest) ([]*handlers.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].([]*handlers.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockRpcProxyIFaceMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockRpcProxyIFace)(nil).GetUsers), arg0, arg1)
}

// Register mocks base method.
func (m *MockRpcProxyIFace) Register(arg0 context.Context, arg1 *common.RegisterRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRpcProxyIFaceMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRpcProxyIFace)(nil).Register), arg0, arg1)
}
