// Code generated by MockGen. DO NOT EDIT.
// Source: first/service/api/rpc/user (interfaces: RpcProxyIFace)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	user "first/kitex_gen/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRpcProxyIFace is a mock of RpcProxyIFace interface.
type MockRpcProxyIFace struct {
	ctrl     *gomock.Controller
	recorder *MockRpcProxyIFaceMockRecorder
}

// MockRpcProxyIFaceMockRecorder is the mock recorder for MockRpcProxyIFace.
type MockRpcProxyIFaceMockRecorder struct {
	mock *MockRpcProxyIFace
}

// NewMockRpcProxyIFace creates a new mock instance.
func NewMockRpcProxyIFace(ctrl *gomock.Controller) *MockRpcProxyIFace {
	mock := &MockRpcProxyIFace{ctrl: ctrl}
	mock.recorder = &MockRpcProxyIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRpcProxyIFace) EXPECT() *MockRpcProxyIFaceMockRecorder {
	return m.recorder
}

// CheckUser mocks base method.
func (m *MockRpcProxyIFace) CheckUser(arg0 context.Context, arg1 *user.CheckUserRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockRpcProxyIFaceMockRecorder) CheckUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockRpcProxyIFace)(nil).CheckUser), arg0, arg1)
}

// FollowUser mocks base method.
func (m *MockRpcProxyIFace) FollowUser(arg0 context.Context, arg1 *user.FollowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FollowUser indicates an expected call of FollowUser.
func (mr *MockRpcProxyIFaceMockRecorder) FollowUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowUser", reflect.TypeOf((*MockRpcProxyIFace)(nil).FollowUser), arg0, arg1)
}

// GetFollowList mocks base method.
func (m *MockRpcProxyIFace) GetFollowList(arg0 context.Context, arg1 *user.GetFollowListRequest) ([]*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowList", arg0, arg1)
	ret0, _ := ret[0].([]*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowList indicates an expected call of GetFollowList.
func (mr *MockRpcProxyIFaceMockRecorder) GetFollowList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowList", reflect.TypeOf((*MockRpcProxyIFace)(nil).GetFollowList), arg0, arg1)
}

// GetFollowerList mocks base method.
func (m *MockRpcProxyIFace) GetFollowerList(arg0 context.Context, arg1 *user.GetFollowerListRequest) ([]*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowerList", arg0, arg1)
	ret0, _ := ret[0].([]*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowerList indicates an expected call of GetFollowerList.
func (mr *MockRpcProxyIFaceMockRecorder) GetFollowerList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowerList", reflect.TypeOf((*MockRpcProxyIFace)(nil).GetFollowerList), arg0, arg1)
}

// GetUserInfo mocks base method.
func (m *MockRpcProxyIFace) GetUserInfo(arg0 context.Context, arg1 *user.GetUserRequest) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockRpcProxyIFaceMockRecorder) GetUserInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockRpcProxyIFace)(nil).GetUserInfo), arg0, arg1)
}

// Register mocks base method.
func (m *MockRpcProxyIFace) Register(arg0 context.Context, arg1 *user.RegisterRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRpcProxyIFaceMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRpcProxyIFace)(nil).Register), arg0, arg1)
}

// UnFollowUser mocks base method.
func (m *MockRpcProxyIFace) UnFollowUser(arg0 context.Context, arg1 *user.FollowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnFollowUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnFollowUser indicates an expected call of UnFollowUser.
func (mr *MockRpcProxyIFaceMockRecorder) UnFollowUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnFollowUser", reflect.TypeOf((*MockRpcProxyIFace)(nil).UnFollowUser), arg0, arg1)
}
